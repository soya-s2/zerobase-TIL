function answer(a, b, c) {
  let number = 0;

  // sort
  num = [a, b, c];
  num.sort((x, y) => x - y);

  // 코드 구현 시작 영역

  // 조건. 가운데 항이 빠졌다고 전제되었다.

  // 1. 등차를 알아야 한다.
  // 2. 등차는 뒤 항과 앞 항과의 차이인데, 배열의 길이는 3이다.
  // 3. 원래의 배열 요소는 4개이므로, 한 개가 빠진 등차들의 합은 4x이다.
  // 3.1. 즉 a, b=a+x, c=b+x, d=c+x이므로 a, c, d만 존재한다고 가정하면 a, c=b+x = a+x+x, d=c+x로 합이 4x이다.
  // 4. 4x인 등차의 합을 배열의 원래 길이만큼 나누면 등차가 나온다.
  // 5. 만약 뒤에서 앞 항을 뺀 값들이 앞쪽이 더 크다면, 앞 쪽의 카드를 잃어버린 것이다.
  // 5.1. [1, 7, 10]은 6, 3의 차를 보이므로 2번째 항이 빠진 것이다. 등차가 1번만 더해진다.
  // 5.2. [3, 8, 18]은 5, 10의 차를 보이므로 3번재 항이 빠진 것이다. 등자가 2번 더해진다.

  // 코드 구현 종료 영역
  let sub = 0;
  for (let i = 1; i < num.length; i++) {
    sub += num[i] - num[i - 1];
  }
  sub /= num.length;

  let index = b - a > c - b ? 2 : 3;
  number = a + sub * (index - 1);

  return number;
}